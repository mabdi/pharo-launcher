{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pharo Launcher The fastest way to get a working Pharo environment: image (an object space with Pharo Core libraries) + virtual machine is to use Pharo Launcher. Pharo Launcher is a tool allowing you to easily download Pharo core images (Pharo stable version, Pharo development version, old Pharo versions, Pharo Mooc) and automatically get the appropriate virtual machine to run these images. The idea behind the Pharo Launcher is that you should be able to access it very rapidly from your OS application launcher. As a result, launching any image is never more than 3 clicks away. Please report bugs on the 'Launcher' project at https://github.com/pharo-project/pharo-launcher/issues You can contribute to this project. All classes and most methods are commented. There are unit tests. Please contribute! Motivations: In the past, I (Damien Cassou) had several folders with images everywhere on my HD. Sometimes with the VM, sometimes without. Lots of image searching as you can imagine. My HD is now much cleaner - all images are in a central place and I need only one icon/starter on the desktop to open. PharoLauncher is also a convenient tool to download specific image update versions if you want to reproduce or fix Pharo bugs.","title":"Home"},{"location":"#welcome-to-pharo-launcher","text":"The fastest way to get a working Pharo environment: image (an object space with Pharo Core libraries) + virtual machine is to use Pharo Launcher. Pharo Launcher is a tool allowing you to easily download Pharo core images (Pharo stable version, Pharo development version, old Pharo versions, Pharo Mooc) and automatically get the appropriate virtual machine to run these images. The idea behind the Pharo Launcher is that you should be able to access it very rapidly from your OS application launcher. As a result, launching any image is never more than 3 clicks away. Please report bugs on the 'Launcher' project at https://github.com/pharo-project/pharo-launcher/issues You can contribute to this project. All classes and most methods are commented. There are unit tests. Please contribute! Motivations: In the past, I (Damien Cassou) had several folders with images everywhere on my HD. Sometimes with the VM, sometimes without. Lots of image searching as you can imagine. My HD is now much cleaner - all images are in a central place and I need only one icon/starter on the desktop to open. PharoLauncher is also a convenient tool to download specific image update versions if you want to reproduce or fix Pharo bugs.","title":"Welcome to Pharo Launcher"},{"location":"commands/","text":"Global Commands Open a window to list and manage Pharo Virtual Machines that can be used by Pharo Launcher. More information in the Manage vms section . Open Pharo Launcher Settings window. More information on the various settings in the Settings section . Open a dialog with information about the current Pharo Launcher version. Exit Pharo Launcher. Image Commands Create a new Pharo image. Launch the selected Pharo image with the selected launch configuration. Launch the selected Pharo image with the selected launch configuration without global settings (e.g. settings loaded for all you Pharo image or by Pharo image version). Launch an image from anywhere on the file system. Import an image from the file system. A pop-up will ask you if you want to import the whole image parent folder or just the image file and associated files (changes, sources, etc.). Refresh the list of images by scanning again the image repository. Open a system file browser on the selected image file. Delete the currently selected image. Additional commands available through the contextual menu: Rename an image Copy the full path name of the selected image to the clipboard Copy the launch command used to by Pharo Launcher to launch the selected launch configuration (and image) to the clipboard. Create a template from the currently selected image. Template will become available in the Templates category. Create a template from the currently selected image and delete the image. Template will become available in the Templates category. Template Commands Template commands are available through the contextual menu: you can rename a template or delete a template from the local cache. Virtual Machine Commands Will update the selected virtual machines by fetching them again from their known location. Open a system file browser on the selected Pharo Virtual Machine. Delete the currently selected Pharo Virtual Machine. Toggle button used to select either Virtual Machines used to run Pharo image, or Virtual Machines used to determine Pharo version of an image (based on the image format number).","title":"Commands"},{"location":"commands/#global-commands","text":"Open a window to list and manage Pharo Virtual Machines that can be used by Pharo Launcher. More information in the Manage vms section . Open Pharo Launcher Settings window. More information on the various settings in the Settings section . Open a dialog with information about the current Pharo Launcher version. Exit Pharo Launcher.","title":"Global Commands"},{"location":"commands/#image-commands","text":"Create a new Pharo image. Launch the selected Pharo image with the selected launch configuration. Launch the selected Pharo image with the selected launch configuration without global settings (e.g. settings loaded for all you Pharo image or by Pharo image version). Launch an image from anywhere on the file system. Import an image from the file system. A pop-up will ask you if you want to import the whole image parent folder or just the image file and associated files (changes, sources, etc.). Refresh the list of images by scanning again the image repository. Open a system file browser on the selected image file. Delete the currently selected image. Additional commands available through the contextual menu: Rename an image Copy the full path name of the selected image to the clipboard Copy the launch command used to by Pharo Launcher to launch the selected launch configuration (and image) to the clipboard. Create a template from the currently selected image. Template will become available in the Templates category. Create a template from the currently selected image and delete the image. Template will become available in the Templates category.","title":"Image Commands"},{"location":"commands/#template-commands","text":"Template commands are available through the contextual menu: you can rename a template or delete a template from the local cache.","title":"Template Commands"},{"location":"commands/#virtual-machine-commands","text":"Will update the selected virtual machines by fetching them again from their known location. Open a system file browser on the selected Pharo Virtual Machine. Delete the currently selected Pharo Virtual Machine. Toggle button used to select either Virtual Machines used to run Pharo image, or Virtual Machines used to determine Pharo version of an image (based on the image format number).","title":"Virtual Machine Commands"},{"location":"contribute/","text":"Contribute to Pharo Launcher Prepare an environment Prepare an image from scratch Download the latest stable Pharo image and use Iceberg (Pharo git client) to clone this repository. Once done, you can load the project through Metacello integration (uses BaselineOfPharoLauncher). Metacello new baseline: 'PharoLauncher'; repository: 'github://pharo-project/pharo-launcher:dev/src'; load Then evaluate \"PharoLauncher open\". You can also launch it from the World menu. Use the Pharo Launcher app Open Pharo Launcher and click on the settings button in the toolbar. There is an option that enables the IDE again - so you can inspect the code or fix a bug. What does the Pharo launcher to launch an image? To run an image, Pharo launcher needs to determine the appropriate virtual machine to run it and fetch it from the web if it is not available. The process is as following: determine the image format version find (and optionally fetch) a compatible VM (a VM able to run this image format) and run the image to get its Pharo version number find (and optionally fetch) the appropriate VM for this specific Pharo image version. Sources files are also downloaded with the VM when applicable. run the image with the appropriate VM Links Source code: https://github.com/pharo-project/pharo-launcher CI: https://ci.inria.fr/pharo-ci-jenkins2/blue/organizations/jenkins/PharoLauncher-Pipeline/branches/","title":"Contribute"},{"location":"contribute/#contribute-to-pharo-launcher","text":"","title":"Contribute to Pharo Launcher"},{"location":"contribute/#prepare-an-environment","text":"","title":"Prepare an environment"},{"location":"contribute/#prepare-an-image-from-scratch","text":"Download the latest stable Pharo image and use Iceberg (Pharo git client) to clone this repository. Once done, you can load the project through Metacello integration (uses BaselineOfPharoLauncher). Metacello new baseline: 'PharoLauncher'; repository: 'github://pharo-project/pharo-launcher:dev/src'; load Then evaluate \"PharoLauncher open\". You can also launch it from the World menu.","title":"Prepare an image from scratch"},{"location":"contribute/#use-the-pharo-launcher-app","text":"Open Pharo Launcher and click on the settings button in the toolbar. There is an option that enables the IDE again - so you can inspect the code or fix a bug.","title":"Use the Pharo Launcher app"},{"location":"contribute/#what-does-the-pharo-launcher-to-launch-an-image","text":"To run an image, Pharo launcher needs to determine the appropriate virtual machine to run it and fetch it from the web if it is not available. The process is as following: determine the image format version find (and optionally fetch) a compatible VM (a VM able to run this image format) and run the image to get its Pharo version number find (and optionally fetch) the appropriate VM for this specific Pharo image version. Sources files are also downloaded with the VM when applicable. run the image with the appropriate VM","title":"What does the Pharo launcher to launch an image?"},{"location":"contribute/#links","text":"Source code: https://github.com/pharo-project/pharo-launcher CI: https://ci.inria.fr/pharo-ci-jenkins2/blue/organizations/jenkins/PharoLauncher-Pipeline/branches/","title":"Links"},{"location":"create-images/","text":"Create your first image Click on the new button (left-most button in the toolbar). It will open the image creation window. In Pharo Launcher, images are created using a template. A template is just a zip file with the pharo image and its associated files (sources, changes). Pharo Launcher comes with an official list of templates containing core Pharo images but also other commonly used templates (Pharo MOOC, Moose, etc). First select the template category Templates are sorted by category to improve searchability. The most popular category is Official distributions . It is the default selection. For more information, see the documentation on templates. Select a template. By default, choose the current 64-bit stable Pharo image. Provide image information. You now need to provide a name to your image. If the name is not valid, a red mark will appear just after the name text input. You can optionally provide a description and an initialization script to your image. Click on the Create image button. Important note : the launcher currently does not fit with the \"Save as\" image style - since each launcher image has to be in a new directory. So either use the \"Copy\" image, then \"Launch\" and then only \"Save\" in the target image or copy the \"Saved as\" image in a new folder and refresh the Launcher view on the right side. Which image to choose? In Pharo, an image is the object space containing ALL the objects of the system: objects that are part of the Pharo runtime and development environment AND objects loaded / created by the user. By default, you should use the \"current stable Pharo image\". You should now prefer 64-bit images over 32-bit images. You can use Pharo development image if you want to contribute to Pharo or you can\u2019t wait to discover / use new Pharo features. You can also use any other template coming with preloaded libraries / tools according to your needs. Initially on a new computer the image list is empty. When creating a new image, you can see the image templates that are available on the web (there is also a local cache). Select the template image you want to use and download it. For instance you can download \"Official distributions\" -> \"Pharo 8.0 (stable)\" which is the latest stable image as of today. The launcher will download the image into a specific directory somewhere in your users home directory (you can configure where by clicking the Settings button). Each image gets its own folder. Use the \"Show in folder\" menu item if you want to open this location. Where are stored my images? Launcher files are considered as user documents and so, they are stored in the user document folder, i.e.: $HOME/Documents/Pharo on OS X, $HOME/My Documents/Pharo on windows, $HOME/Pharo on Linux (some Linux distributions provide a document folder but some others not, so we put it in the HOME directory in all cases). In this folder, you will find your images and virtual machines needed to run images. The default location can be customized in Pharo Launcher settings. Image initialization script When working with Pharo, you often need to load your project code and its dependencies. You could also want to execute some actions once to configure your image. This the purpose of the image initialization script: it is a Smalltalk script that will be executed at the first launch of the image and will then be disabled . When creating an image, you can select an already existing script or create a new one. For your conveniance, there is a script editor included in Pharo Launcher. Just click on the edit button at the right of the initialization script dropbox. Once the initialization script selected, you can have a preview of it just below the drop list: Initialization script examples Load a local project gitFolder := FileLocator home / 'pharo-launcher'. Metacello new repository: 'gitlocal://', gitFolder fullName, '/src'; baseline: 'PharoLauncher'; load Load a project hosted on github Metacello new baseline: 'PharoLauncher'; repository: 'github://pharo-project/pharo-launcher:master/src'; load If you need to execute again the initialization script at image launch, select the image in the list of images and then click on the checkbox Initialization script . The script will be executed at next image launch and then disabled.","title":"Create images"},{"location":"create-images/#create-your-first-image","text":"Click on the new button (left-most button in the toolbar). It will open the image creation window. In Pharo Launcher, images are created using a template. A template is just a zip file with the pharo image and its associated files (sources, changes). Pharo Launcher comes with an official list of templates containing core Pharo images but also other commonly used templates (Pharo MOOC, Moose, etc). First select the template category Templates are sorted by category to improve searchability. The most popular category is Official distributions . It is the default selection. For more information, see the documentation on templates. Select a template. By default, choose the current 64-bit stable Pharo image. Provide image information. You now need to provide a name to your image. If the name is not valid, a red mark will appear just after the name text input. You can optionally provide a description and an initialization script to your image. Click on the Create image button. Important note : the launcher currently does not fit with the \"Save as\" image style - since each launcher image has to be in a new directory. So either use the \"Copy\" image, then \"Launch\" and then only \"Save\" in the target image or copy the \"Saved as\" image in a new folder and refresh the Launcher view on the right side.","title":"Create your first image"},{"location":"create-images/#which-image-to-choose","text":"In Pharo, an image is the object space containing ALL the objects of the system: objects that are part of the Pharo runtime and development environment AND objects loaded / created by the user. By default, you should use the \"current stable Pharo image\". You should now prefer 64-bit images over 32-bit images. You can use Pharo development image if you want to contribute to Pharo or you can\u2019t wait to discover / use new Pharo features. You can also use any other template coming with preloaded libraries / tools according to your needs. Initially on a new computer the image list is empty. When creating a new image, you can see the image templates that are available on the web (there is also a local cache). Select the template image you want to use and download it. For instance you can download \"Official distributions\" -> \"Pharo 8.0 (stable)\" which is the latest stable image as of today. The launcher will download the image into a specific directory somewhere in your users home directory (you can configure where by clicking the Settings button). Each image gets its own folder. Use the \"Show in folder\" menu item if you want to open this location.","title":"Which image to choose?"},{"location":"create-images/#where-are-stored-my-images","text":"Launcher files are considered as user documents and so, they are stored in the user document folder, i.e.: $HOME/Documents/Pharo on OS X, $HOME/My Documents/Pharo on windows, $HOME/Pharo on Linux (some Linux distributions provide a document folder but some others not, so we put it in the HOME directory in all cases). In this folder, you will find your images and virtual machines needed to run images. The default location can be customized in Pharo Launcher settings.","title":"Where are stored my images?"},{"location":"create-images/#image-initialization-script","text":"When working with Pharo, you often need to load your project code and its dependencies. You could also want to execute some actions once to configure your image. This the purpose of the image initialization script: it is a Smalltalk script that will be executed at the first launch of the image and will then be disabled . When creating an image, you can select an already existing script or create a new one. For your conveniance, there is a script editor included in Pharo Launcher. Just click on the edit button at the right of the initialization script dropbox. Once the initialization script selected, you can have a preview of it just below the drop list:","title":"Image initialization script"},{"location":"create-images/#initialization-script-examples","text":"","title":"Initialization script examples"},{"location":"create-images/#load-a-local-project","text":"gitFolder := FileLocator home / 'pharo-launcher'. Metacello new repository: 'gitlocal://', gitFolder fullName, '/src'; baseline: 'PharoLauncher'; load","title":"Load a local project"},{"location":"create-images/#load-a-project-hosted-on-github","text":"Metacello new baseline: 'PharoLauncher'; repository: 'github://pharo-project/pharo-launcher:master/src'; load If you need to execute again the initialization script at image launch, select the image in the list of images and then click on the checkbox Initialization script . The script will be executed at next image launch and then disabled.","title":"Load a project hosted on github"},{"location":"installation/","text":"Downloading Pharo Launcher You can get Pharo Launcher from the Pharo website . The default download is a 64-bit version. Windows MacOS GNU/Linux GNU/Linux (32bit) Upgrade notes Upgrading from Pharo Launcher 1.x to Pharo Launcher 2.x Pharo Launcher are mostly compatibles between each other. Pharo Launcher introduces a new serialization format for image metadata. Pharo Launcher 1.x uses different files to store metadata: meta-inf.ston stores the template used to create the image description.txt file contains the description of the image if any pharo.version file tells Pharo Launcher what is the pharo version of the image. Pharo Launcher 2.x uses a single ston file to store all metadata: meta-inf.ston . It stores the origin template, the description and the pahro version as well as other informations like launch configurations (VM to use, VM and image arguments) and initialization script. When using Pharo Launcher 2.x with pre-existing images, meta-data files will be parsed to fetch the metadata and will then be saved in meta-inf.ston with the new format. It means you will not loose information but meta-inf.ston will be overriden, meaning that going back to Pharo Launcher 1.x will throw error when parsing this metadata file. Images and Virtual Machines files are not impacted by the update. You may encouter problems with Pharo Launcher settings parsing. If so, just delete the problematic settings from the settings file. Install on Mac OS X Double-click on the dmg file and drop Pharo Launcher app in Applications folder. Before being able to run Pharo Launcher, you may need to update temporarily your security settings : if you have Mac OS X 10.8 or higher then you might get the following message: This is due to the OS X Gatekeeper feature that is designed to discourage users from downloading apps from random locations and possibly installing something bad. Assuming you've downloaded Pharo Launcher from Pharo web site, then you have nothing to worry about, and you just need to bypass this warning: Recommended - Right click (or command+click) the application icon and select \"open\" Advanced - Enable all application downloads In OS X go to the Apple Menu -> System Preferences -> Security & Privacy -> General Unlock the padlock at the bottom of the window, which will require a computer admin password Where it says \"Allow applications downloaded from:\" select \"Anywhere\" OS X will give you a scary warning that is a bit exaggerated. If you're not comfortable with this, use the \"right click\" method mentioned above. In all cases OS X will still ask you if you want to open an \"unsigned\" application the first time it is opened, so new applications that are downloaded can't just start by themselves. Just click on \"Open\". Warning : There is a high probability that the very first run of Pharo Launcher does nothing. In this case, just run it a second time and Pharo Launcher will open. Install on Windows Run the installer and follow instructions. Be sure to install Pharo Launcher in a place where you have write privileges . The installer wil create a shorcut on the Desktop as well as an application entry in the Windows menu. Warning : Antinvirus can prevent Pharo Launcher to behave correctly It has been reported on Windows that the Antivirus prevents Pharo Launcher to download the VMs needed to run images. A workaround is to whitelist PharoLauncher or to temporary disable the antivirus when you need to download new VMs. Install on Windows Linux Subsystem (WSL) Thanks to Christopher Fuhrman, the original author of these instructions . Preparation Install and activate WSL following Microsoft\u2019s instructions . Install an X Server for Windows. You can use VcXsrv : Run XLaunch from the start menu, which invokes a wizard. Accept all the defaults on the wizard. At the last page of the wizard, click Save configuration specifying %appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup to have VcXsrv start automatically when you start Windows. You should export DISPLAY=localhost:0 (e.g., in your WSL ~/.bashrc ). Install Mesa with the command sudo apt install mesa-utils . This is apparently needed because there are missing libraries for the X11 display used by Pharo. For reference, if you don\u2019t do this step, you\u2019ll get the following message that\u2019s somewhat misleading: $ ./pharo-ui could not find display driver vm-display-X11; either: - check that /home/myusername/pharo-dir/pharo-vm/lib/pharo/5.0-201901051900//vm-display-X11.so exists, or - use the '-plugins <path>' option to tell me where it is, or - remove DISPLAY from your environment. Installation Note: these instructions are almost the same as for a standard installation on GNU/Linux - Download the latest version of the Linux 64 version of Pharo Launcher to your home directory: cd curl -o pharo-launcher.zip -L https://files.pharo.org/pharo-launcher/linux64 Unzip it (you may need to install the unzip tool with sudo apt install unzip): unzip pharo-launcher.zip Normally this will create a ~/pharolauncher directory. Run Pharo Launcher with the following command: pharolauncher/pharo-launcher & Install on GNU/Linux Download the latest version of the Linux 64 version of Pharo Launcher to your home directory: cd curl -o pharo-launcher.zip -L https://files.pharo.org/pharo-launcher/linux64 Unzip the archive in a place where you have write privileges (you may need to install the unzip tool with sudo apt install unzip): unzip pharo-launcher.zip Normally this will create a ~/pharolauncher directory. You can also do it through the UI Run Pharo Launcher ./pharolauncher/pharo-launcher","title":"Installation"},{"location":"installation/#downloading-pharo-launcher","text":"You can get Pharo Launcher from the Pharo website . The default download is a 64-bit version. Windows MacOS GNU/Linux GNU/Linux (32bit)","title":"Downloading Pharo Launcher"},{"location":"installation/#upgrade-notes","text":"","title":"Upgrade notes"},{"location":"installation/#upgrading-from-pharo-launcher-1x-to-pharo-launcher-2x","text":"Pharo Launcher are mostly compatibles between each other. Pharo Launcher introduces a new serialization format for image metadata. Pharo Launcher 1.x uses different files to store metadata: meta-inf.ston stores the template used to create the image description.txt file contains the description of the image if any pharo.version file tells Pharo Launcher what is the pharo version of the image. Pharo Launcher 2.x uses a single ston file to store all metadata: meta-inf.ston . It stores the origin template, the description and the pahro version as well as other informations like launch configurations (VM to use, VM and image arguments) and initialization script. When using Pharo Launcher 2.x with pre-existing images, meta-data files will be parsed to fetch the metadata and will then be saved in meta-inf.ston with the new format. It means you will not loose information but meta-inf.ston will be overriden, meaning that going back to Pharo Launcher 1.x will throw error when parsing this metadata file. Images and Virtual Machines files are not impacted by the update. You may encouter problems with Pharo Launcher settings parsing. If so, just delete the problematic settings from the settings file.","title":"Upgrading from Pharo Launcher 1.x to Pharo Launcher 2.x"},{"location":"installation/#install-on-mac-os-x","text":"Double-click on the dmg file and drop Pharo Launcher app in Applications folder. Before being able to run Pharo Launcher, you may need to update temporarily your security settings : if you have Mac OS X 10.8 or higher then you might get the following message: This is due to the OS X Gatekeeper feature that is designed to discourage users from downloading apps from random locations and possibly installing something bad. Assuming you've downloaded Pharo Launcher from Pharo web site, then you have nothing to worry about, and you just need to bypass this warning: Recommended - Right click (or command+click) the application icon and select \"open\" Advanced - Enable all application downloads In OS X go to the Apple Menu -> System Preferences -> Security & Privacy -> General Unlock the padlock at the bottom of the window, which will require a computer admin password Where it says \"Allow applications downloaded from:\" select \"Anywhere\" OS X will give you a scary warning that is a bit exaggerated. If you're not comfortable with this, use the \"right click\" method mentioned above. In all cases OS X will still ask you if you want to open an \"unsigned\" application the first time it is opened, so new applications that are downloaded can't just start by themselves. Just click on \"Open\". Warning : There is a high probability that the very first run of Pharo Launcher does nothing. In this case, just run it a second time and Pharo Launcher will open.","title":"Install on Mac OS X"},{"location":"installation/#install-on-windows","text":"Run the installer and follow instructions. Be sure to install Pharo Launcher in a place where you have write privileges . The installer wil create a shorcut on the Desktop as well as an application entry in the Windows menu. Warning : Antinvirus can prevent Pharo Launcher to behave correctly It has been reported on Windows that the Antivirus prevents Pharo Launcher to download the VMs needed to run images. A workaround is to whitelist PharoLauncher or to temporary disable the antivirus when you need to download new VMs.","title":"Install on Windows"},{"location":"installation/#install-on-windows-linux-subsystem-wsl","text":"Thanks to Christopher Fuhrman, the original author of these instructions .","title":"Install on Windows Linux Subsystem (WSL)"},{"location":"installation/#preparation","text":"Install and activate WSL following Microsoft\u2019s instructions . Install an X Server for Windows. You can use VcXsrv : Run XLaunch from the start menu, which invokes a wizard. Accept all the defaults on the wizard. At the last page of the wizard, click Save configuration specifying %appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup to have VcXsrv start automatically when you start Windows. You should export DISPLAY=localhost:0 (e.g., in your WSL ~/.bashrc ). Install Mesa with the command sudo apt install mesa-utils . This is apparently needed because there are missing libraries for the X11 display used by Pharo. For reference, if you don\u2019t do this step, you\u2019ll get the following message that\u2019s somewhat misleading: $ ./pharo-ui could not find display driver vm-display-X11; either: - check that /home/myusername/pharo-dir/pharo-vm/lib/pharo/5.0-201901051900//vm-display-X11.so exists, or - use the '-plugins <path>' option to tell me where it is, or - remove DISPLAY from your environment.","title":"Preparation"},{"location":"installation/#installation","text":"Note: these instructions are almost the same as for a standard installation on GNU/Linux - Download the latest version of the Linux 64 version of Pharo Launcher to your home directory: cd curl -o pharo-launcher.zip -L https://files.pharo.org/pharo-launcher/linux64 Unzip it (you may need to install the unzip tool with sudo apt install unzip): unzip pharo-launcher.zip Normally this will create a ~/pharolauncher directory. Run Pharo Launcher with the following command: pharolauncher/pharo-launcher &","title":"Installation"},{"location":"installation/#install-on-gnulinux","text":"Download the latest version of the Linux 64 version of Pharo Launcher to your home directory: cd curl -o pharo-launcher.zip -L https://files.pharo.org/pharo-launcher/linux64 Unzip the archive in a place where you have write privileges (you may need to install the unzip tool with sudo apt install unzip): unzip pharo-launcher.zip Normally this will create a ~/pharolauncher directory. You can also do it through the UI Run Pharo Launcher ./pharolauncher/pharo-launcher","title":"Install on GNU/Linux"},{"location":"launch-configurations/","text":"In order to launch Pharo images, Pharo Launcher needs some information. The most important one is: Which VM to use? Pharo Launcher can solve this problem for you by using the recommanded VM for the Pharo version of the image to launch. Example: For a Pharo 8.0, 64-bit image, Pharo Launcher will use the stable 64-bit virtual machine of Pharo 8. With this information, Pharo Launcher generates a Default launch configuration that will be used to launch the image. You could want to customize this Default configuration or create additional ones, by example, to use another VM (e.g. headless VM), or to give extra arguments to the virtual machine and / or to the image. That's why, if you select the Edit configurations ... entry in the Launch configuration drop list (in the toolbar), Pharo Launcher will open a new window with the Launch configuration editor. From this editor, you can: add/remove Launch configuration for the selected Pharo image, choose another VM than the one Pharo Launcher selected for you, add/remove arguments to the Virtual Machine, add/remove arguments to the image. Clicking an Save & select will close the editor and select the edited Launch configuration in the Pharo Launcher toolbar, the ready to be launched.","title":"Launch configurations"},{"location":"manage-vms/","text":"The Virtual Machine manager is available from the main toolbar. It shows the list of default Virtual Machines (e.g. most used VMs) as well as the Virtual Machines already available locally for Pharo Launcher. You can download a non-available virtual machine by clicking on the update button. If you click on the update button when the selected virtual machine(s) is already availble, it will force a new download to get an update virtual machine if available. A click on the private button will toggle the view between: the list of VMs used by Pharo Launcher to launch Pharo images, the list of VMs used by Pharo Launcher to determine the Pharo version of images (indeed, we must run the image to get its Pharo version number if not found in metadata aside the image). vms-presenter-private.png","title":"Manage vms"},{"location":"settings/","text":"Pharo Launcher comes with a few settings you can customize. WARNING: Settings are only persisted by clicking on the \"Store settings\" button! If you do not click on \"Store settings\", settings changes will only apply for the current Pharo Launcher session (i.e. until you quit Pharo Launcher). Network Use HTTP proxy ? If checked then the you will be able to set a port number and a server name. If unchecked, then no http proxy is used. Behavior Templates cleared at startup: When enabled, Launcher startup clears the Templates List. When disabled, Launcher startup retains the Templates List from last run. Quit on Launch: When enabled, Pharo Launcher quits when an image is launched. When disabled, Pharo Launcher stays alive when an image is launched. Warn on architecture mismatch? Get a warning when trying to launch an image with a different architecture than the Launcher (i.e. trying to launch a 32-bit image from Pharo Launcher 64-bit). Check for template sources update? Check regularly (each day) if Pharo Launcher Template official sources has an update available (needs internet access) Paths Location of the template sources file: Path to the directory that will contain Pharo Launcher template sources file. Template sources URL: URL for downloading the template list. Location of image initialization scripts: A directory where all your Pharo images initialization scripts will be saved (executed once at image creation). Location of images: A directory where all your Pharo images will be saved and launched. Virtual Machines directory: Path to the directory containing all the VMs to launch your Pharo images. WARNING: You must have the read/write rights on folders.The path might need to escape some whitespace characters. Danger zone Use these options only if you know what you are doing! Enable development environment: closes Pharo Launcher UI and restore Pharo IDE for development purposes. Hard reset persistent state: One-shot action. Will put nil in all class variables of Pharo Launcher packages and restart the UI.","title":"Settings"},{"location":"settings/#network","text":"Use HTTP proxy ? If checked then the you will be able to set a port number and a server name. If unchecked, then no http proxy is used.","title":"Network"},{"location":"settings/#behavior","text":"Templates cleared at startup: When enabled, Launcher startup clears the Templates List. When disabled, Launcher startup retains the Templates List from last run. Quit on Launch: When enabled, Pharo Launcher quits when an image is launched. When disabled, Pharo Launcher stays alive when an image is launched. Warn on architecture mismatch? Get a warning when trying to launch an image with a different architecture than the Launcher (i.e. trying to launch a 32-bit image from Pharo Launcher 64-bit). Check for template sources update? Check regularly (each day) if Pharo Launcher Template official sources has an update available (needs internet access)","title":"Behavior"},{"location":"settings/#paths","text":"Location of the template sources file: Path to the directory that will contain Pharo Launcher template sources file. Template sources URL: URL for downloading the template list. Location of image initialization scripts: A directory where all your Pharo images initialization scripts will be saved (executed once at image creation). Location of images: A directory where all your Pharo images will be saved and launched. Virtual Machines directory: Path to the directory containing all the VMs to launch your Pharo images. WARNING: You must have the read/write rights on folders.The path might need to escape some whitespace characters.","title":"Paths"},{"location":"settings/#danger-zone","text":"Use these options only if you know what you are doing! Enable development environment: closes Pharo Launcher UI and restore Pharo IDE for development purposes. Hard reset persistent state: One-shot action. Will put nil in all class variables of Pharo Launcher packages and restart the UI.","title":"Danger zone"},{"location":"templates/","text":"Templates are the only way to create images. They are materialized by a zip file contining the Pharo image and all its associated file. For example, the Pharo 8 official template is composed of: the sources file: Pharo8.0-32bit-278304f.sources the image: Pharo8.0-SNAPSHOT-64bit-278304f.image the changes file: Pharo8.0-SNAPSHOT-64bit-278304f.changes the pharo version number file (used by Pharo Launcher if present): pharo.version Template categories Official distributions : list of templates officialy supported by Pharo. You will find here latest Pharo images (development, stabl, old stable) and Moose images. Pharo Mooc: convenient category for newcomers to discover Pharo. It contains the MOOC image needed for the practical part of the MOOC. Deprecated distributions: old Pharo and Moose images version (since Pharo 2.0) Pharo Contribution Jenkins: This category represents jobs available on the Jenkins server https://ci.inria.fr/pharo-contribution. If the job provides a zip file as artefact, it will be used as a template to create an image. Moose Jenkins: This category represents jobs available on the Jenkins server https://ci.inria.fr/moose. If the job provides a zip file as artefact, it will be used as a template to create an image. Pharo xx (stable): all versions of the current stable Pharo version Pharo xx (development version): all versions of the current development Pharo version Templates: This category contains templates that are available locally (i.e. without network connection). By default, it only contains the current Pharo stable image that is shipped with Pharo Launcher. Once you start downloading some templates, they are cached in this category for further reuse. Warning: if the template is updated on the server, the cached version will NOT be invalidated, so local and server version of the template will differ. There are different kind of categories: Fixed URL: Represent a list of templates that is defined at construction time. The interesting property of this group is that is does not require the network to be shown. The network is only needed to actually download a template. HTTP listing: Represent a list of templates as given by an HTML webpage. <a href=\"*.zip\"> are searched in the webpage. You can also provide a regular expression to filter files. Jenkins server: group of templates provided by a Jenkins server. I use Jenkins' JSON API to get the data from the server. Cache: special group taking care of caching locally downloaded templates from other template categories. Make my own templates available There are different ways: The easiest way would be to add a CI job on https://ci.inria.fr/pharo-contribution/. This job should archive a zip file with your image and the changes file. Then you will be able to browse your image as a template from Pharo contribution Jenkins / / Latest successful build . Another way is to create your own template . Last but not least, you can add your own list of template categories . Create your own template You can create your own templates from Pharo Launcher. From any image in the image list, right-click and select Create template or Create template and delete image . It will create a zip file from the selected image and put it in the Templates category under the provided name. Create your own list of template categories Pharo already provides a wide range of templates but you can provide your own categories. It is useful to add templates that are private (e.g. private jenkins instance) or only of interest for you. It is doable thanks to the mysources.list file located in the Pharo folder. If present, this file defines additional template sources to the official list of templates. At this time, there is no UI to add them but you can take inspiration from the following examples. Warning: take care to separate each template category by a comma. All categories should be enclosed inside [] . Here is an example of a mysources.list file: [ PhLTemplateSource { #type : #HttpListing, #name : 'User-defined http listing', #url : 'http://myserver.org/myimages/' }, PhLTemplateSource { #type : #JenkinsServer, #name : 'My Jenkins server', #url : 'https://jenkins.mycompany.org', #username : 'john', #password: 'doefkwoiekfdoekdw2302ek349039e' } ] Add a JenkinsServer server You can declare your own Jenkins server by providing its URL and using the #JenkinsServer type. PhLTemplateSource { #type : #JenkinsServer, #name : 'Another Jenkins server', #url : 'https://ci.inria.fr/moose/' } The name will be displayed as the template category. Url will be used to determine Jenkins API to query to get jobs, builds, runs, etc. You can alse declare a private Jenkins server by providing a secure (i.e. using https protocol) URL to access it, a username and its associated token. We advise you to generate an API token and not to use directly your password. See https://jenkins.io/blog/2018/07/02/new-api-token-system/ for more information. The token has to be specified in the password entry. PhLTemplateSource { #type : #JenkinsServer, #name : 'My Jenkins server', #url : 'https://jenkins.mycompany.org', #username : 'john', #password : 'doefkwoiekfdoekdw2302ek349039e' } Add a group from an URL (HTPP listing) An easy way to add a template category is the HTTP listing. You just provide the category name and a URL. Then the category will see all Zip files under this URL as a template available for Pharo Launcher. Here is an example: PhLTemplateSource { #type : #HttpListing, #name : 'Http listing example', #url : 'http://files.pharo.org/pharo-launcher/1.9.2/' } If needed, you can specify a filter pattern to exclude some files to be considered as templates. Here is an example: PhLTemplateSource { #type : #HttpListing, #name : 'Pharo 7.0 (development version)', #url : 'https://files.pharo.org/image/70/', #filterPattern : 'href=\"(Pharo-?7.0.0-(alpha|rc\\\\d+).build.[^\"]*.zip)\"' } filterPattern is given as parameter to RxParser>>#parse: . The filter pattern must have parenthesis because this is what we want to extract for each match. For more information on the regex, see Pharo by example book, regex chapter . There is also an option to specify the format of the template name that will be used into Pharo Launcher. It is usefull when the url has many segments. Here is an example: PhLTemplateSource { #type : #HttpListing, #name : 'Pharo Remote Development (TelePharo)', #url : 'https://github.com/pharo-ide/TelePharo/releases', #filterPattern : 'href=\"([^\"]*/Pharo[0-9][^\"]*.zip)\"', #templateNameFormat: '{6} ({5})' } Numbers {X} between brackets will be replaced with the value of the segment at position X in the URL path segments (ex: '{6} ({5})' with the url segments '/pharo-ide/TelePharo/releases/download/v0.4.2/Pharo7.0-32bit-TelePharo.zip' will give 'Pharo7.0-32bit-TelePharo (v0.4.2)'). Note that the extension of the last segment is automatically dropped. You can also specify a server protected by a login / password as following: PhLTemplateSource { #type : #HttpListing, #name : 'My main images', #url : 'https://intranet.mycompany.org/files', #username : 'john', #password : 'Doe!' } Add a group with individual URL templates It is also possible to create a group that will contain individual URL templates. The group name will be the template category name. Each Template you declare in this group should be of type #URL. A template basically has a name and a URL to the template. You can also specify URLs protected by a password with the #username and #password keywords. PhLTemplateSource { #type : #URLGroup, #name : 'My main images', #templates : [ PhLTemplateSource { #type : #URL, #name : 'MyProject2', #url : 'https://www.mycompany.org/downloads/project2.zip' }, PhLTemplateSource { #type : #URL, #name : 'MyProject1 from private', #url : 'https://intranet.mycompany.org/files/project1.zip', #username : 'john', #password : 'Doe!' } ] }","title":"Templates"},{"location":"templates/#template-categories","text":"Official distributions : list of templates officialy supported by Pharo. You will find here latest Pharo images (development, stabl, old stable) and Moose images. Pharo Mooc: convenient category for newcomers to discover Pharo. It contains the MOOC image needed for the practical part of the MOOC. Deprecated distributions: old Pharo and Moose images version (since Pharo 2.0) Pharo Contribution Jenkins: This category represents jobs available on the Jenkins server https://ci.inria.fr/pharo-contribution. If the job provides a zip file as artefact, it will be used as a template to create an image. Moose Jenkins: This category represents jobs available on the Jenkins server https://ci.inria.fr/moose. If the job provides a zip file as artefact, it will be used as a template to create an image. Pharo xx (stable): all versions of the current stable Pharo version Pharo xx (development version): all versions of the current development Pharo version Templates: This category contains templates that are available locally (i.e. without network connection). By default, it only contains the current Pharo stable image that is shipped with Pharo Launcher. Once you start downloading some templates, they are cached in this category for further reuse. Warning: if the template is updated on the server, the cached version will NOT be invalidated, so local and server version of the template will differ. There are different kind of categories: Fixed URL: Represent a list of templates that is defined at construction time. The interesting property of this group is that is does not require the network to be shown. The network is only needed to actually download a template. HTTP listing: Represent a list of templates as given by an HTML webpage. <a href=\"*.zip\"> are searched in the webpage. You can also provide a regular expression to filter files. Jenkins server: group of templates provided by a Jenkins server. I use Jenkins' JSON API to get the data from the server. Cache: special group taking care of caching locally downloaded templates from other template categories.","title":"Template categories"},{"location":"templates/#make-my-own-templates-available","text":"There are different ways: The easiest way would be to add a CI job on https://ci.inria.fr/pharo-contribution/. This job should archive a zip file with your image and the changes file. Then you will be able to browse your image as a template from Pharo contribution Jenkins / / Latest successful build . Another way is to create your own template . Last but not least, you can add your own list of template categories .","title":"Make my own templates available"},{"location":"templates/#create-your-own-template","text":"You can create your own templates from Pharo Launcher. From any image in the image list, right-click and select Create template or Create template and delete image . It will create a zip file from the selected image and put it in the Templates category under the provided name.","title":"Create your own template"},{"location":"templates/#create-your-own-list-of-template-categories","text":"Pharo already provides a wide range of templates but you can provide your own categories. It is useful to add templates that are private (e.g. private jenkins instance) or only of interest for you. It is doable thanks to the mysources.list file located in the Pharo folder. If present, this file defines additional template sources to the official list of templates. At this time, there is no UI to add them but you can take inspiration from the following examples. Warning: take care to separate each template category by a comma. All categories should be enclosed inside [] . Here is an example of a mysources.list file: [ PhLTemplateSource { #type : #HttpListing, #name : 'User-defined http listing', #url : 'http://myserver.org/myimages/' }, PhLTemplateSource { #type : #JenkinsServer, #name : 'My Jenkins server', #url : 'https://jenkins.mycompany.org', #username : 'john', #password: 'doefkwoiekfdoekdw2302ek349039e' } ]","title":"Create your own list of template categories"},{"location":"templates/#add-a-jenkinsserver-server","text":"You can declare your own Jenkins server by providing its URL and using the #JenkinsServer type. PhLTemplateSource { #type : #JenkinsServer, #name : 'Another Jenkins server', #url : 'https://ci.inria.fr/moose/' } The name will be displayed as the template category. Url will be used to determine Jenkins API to query to get jobs, builds, runs, etc. You can alse declare a private Jenkins server by providing a secure (i.e. using https protocol) URL to access it, a username and its associated token. We advise you to generate an API token and not to use directly your password. See https://jenkins.io/blog/2018/07/02/new-api-token-system/ for more information. The token has to be specified in the password entry. PhLTemplateSource { #type : #JenkinsServer, #name : 'My Jenkins server', #url : 'https://jenkins.mycompany.org', #username : 'john', #password : 'doefkwoiekfdoekdw2302ek349039e' }","title":"Add a JenkinsServer server"},{"location":"templates/#add-a-group-from-an-url-htpp-listing","text":"An easy way to add a template category is the HTTP listing. You just provide the category name and a URL. Then the category will see all Zip files under this URL as a template available for Pharo Launcher. Here is an example: PhLTemplateSource { #type : #HttpListing, #name : 'Http listing example', #url : 'http://files.pharo.org/pharo-launcher/1.9.2/' } If needed, you can specify a filter pattern to exclude some files to be considered as templates. Here is an example: PhLTemplateSource { #type : #HttpListing, #name : 'Pharo 7.0 (development version)', #url : 'https://files.pharo.org/image/70/', #filterPattern : 'href=\"(Pharo-?7.0.0-(alpha|rc\\\\d+).build.[^\"]*.zip)\"' } filterPattern is given as parameter to RxParser>>#parse: . The filter pattern must have parenthesis because this is what we want to extract for each match. For more information on the regex, see Pharo by example book, regex chapter . There is also an option to specify the format of the template name that will be used into Pharo Launcher. It is usefull when the url has many segments. Here is an example: PhLTemplateSource { #type : #HttpListing, #name : 'Pharo Remote Development (TelePharo)', #url : 'https://github.com/pharo-ide/TelePharo/releases', #filterPattern : 'href=\"([^\"]*/Pharo[0-9][^\"]*.zip)\"', #templateNameFormat: '{6} ({5})' } Numbers {X} between brackets will be replaced with the value of the segment at position X in the URL path segments (ex: '{6} ({5})' with the url segments '/pharo-ide/TelePharo/releases/download/v0.4.2/Pharo7.0-32bit-TelePharo.zip' will give 'Pharo7.0-32bit-TelePharo (v0.4.2)'). Note that the extension of the last segment is automatically dropped. You can also specify a server protected by a login / password as following: PhLTemplateSource { #type : #HttpListing, #name : 'My main images', #url : 'https://intranet.mycompany.org/files', #username : 'john', #password : 'Doe!' }","title":"Add a group from an URL (HTPP listing)"},{"location":"templates/#add-a-group-with-individual-url-templates","text":"It is also possible to create a group that will contain individual URL templates. The group name will be the template category name. Each Template you declare in this group should be of type #URL. A template basically has a name and a URL to the template. You can also specify URLs protected by a password with the #username and #password keywords. PhLTemplateSource { #type : #URLGroup, #name : 'My main images', #templates : [ PhLTemplateSource { #type : #URL, #name : 'MyProject2', #url : 'https://www.mycompany.org/downloads/project2.zip' }, PhLTemplateSource { #type : #URL, #name : 'MyProject1 from private', #url : 'https://intranet.mycompany.org/files/project1.zip', #username : 'john', #password : 'Doe!' } ] }","title":"Add a group with individual URL templates"}]}